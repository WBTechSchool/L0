// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: players.sql

package gen

import (
	"context"
)

const getPlayer = `-- name: GetPlayer :one
SELECT player_id, name, eos_id, steam_id, first_seen, last_seen FROM players
WHERE player_id = $1
LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, playerID int32) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayer, playerID)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Name,
		&i.EosID,
		&i.SteamID,
		&i.FirstSeen,
		&i.LastSeen,
	)
	return i, err
}

const getPlayerByEosID = `-- name: GetPlayerByEosID :one
SELECT player_id, name, eos_id, steam_id, first_seen, last_seen FROM players
WHERE eos_id = $1
LIMIT 1
`

func (q *Queries) GetPlayerByEosID(ctx context.Context, eosID string) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerByEosID, eosID)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Name,
		&i.EosID,
		&i.SteamID,
		&i.FirstSeen,
		&i.LastSeen,
	)
	return i, err
}

const getPlayerBySteamID = `-- name: GetPlayerBySteamID :one
SELECT player_id, name, eos_id, steam_id, first_seen, last_seen FROM players
WHERE steam_id = $1
LIMIT 1
`

func (q *Queries) GetPlayerBySteamID(ctx context.Context, steamID string) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerBySteamID, steamID)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Name,
		&i.EosID,
		&i.SteamID,
		&i.FirstSeen,
		&i.LastSeen,
	)
	return i, err
}

const insertPlayer = `-- name: InsertPlayer :one
INSERT INTO players (name, eos_id, steam_id)
VALUES ($1, $2, $3)
RETURNING player_id
`

type InsertPlayerParams struct {
	Name    string `json:"name"`
	EosID   string `json:"eos_id"`
	SteamID string `json:"steam_id"`
}

func (q *Queries) InsertPlayer(ctx context.Context, arg InsertPlayerParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertPlayer, arg.Name, arg.EosID, arg.SteamID)
	var player_id int32
	err := row.Scan(&player_id)
	return player_id, err
}

const updatePlayerName = `-- name: UpdatePlayerName :exec
UPDATE players
SET name = $1
WHERE player_id = $1
`

func (q *Queries) UpdatePlayerName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, updatePlayerName, name)
	return err
}
