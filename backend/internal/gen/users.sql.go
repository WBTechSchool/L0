// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gen

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT user_id, steam_id, name, avatar, created_at FROM users
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SteamID,
		&i.Name,
		&i.Avatar,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (steam_id, name, avatar)
VALUES ($1, $2, $3)
RETURNING user_id
`

type InsertUserParams struct {
	SteamID string  `json:"steam_id"`
	Name    string  `json:"name"`
	Avatar  *string `json:"avatar"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.SteamID, arg.Name, arg.Avatar)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  steam_id = $2,
  name = $3,
  avatar = $4
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID  int32   `json:"user_id"`
	SteamID string  `json:"steam_id"`
	Name    string  `json:"name"`
	Avatar  *string `json:"avatar"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.UserID,
		arg.SteamID,
		arg.Name,
		arg.Avatar,
	)
	return err
}
