// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: logs.sql

package gen

import (
	"context"
)

const insertLog = `-- name: InsertLog :one
INSERT INTO logs (log_type, server_id, user_id, player_id, victim_id, attacker_id, player_ip, squad_id, squad_name, team_id, chat_type, is_teamkill, message, map)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING log_id
`

type InsertLogParams struct {
	LogType    string       `json:"log_type"`
	ServerID   *int32       `json:"server_id"`
	UserID     *int32       `json:"user_id"`
	PlayerID   *int32       `json:"player_id"`
	VictimID   *int32       `json:"victim_id"`
	AttackerID *int32       `json:"attacker_id"`
	PlayerIp   *string      `json:"player_ip"`
	SquadID    *string      `json:"squad_id"`
	SquadName  *string      `json:"squad_name"`
	TeamID     *string      `json:"team_id"`
	ChatType   NullChatType `json:"chat_type"`
	IsTeamkill *bool        `json:"is_teamkill"`
	Message    *string      `json:"message"`
	Map        *string      `json:"map"`
}

func (q *Queries) InsertLog(ctx context.Context, arg InsertLogParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertLog,
		arg.LogType,
		arg.ServerID,
		arg.UserID,
		arg.PlayerID,
		arg.VictimID,
		arg.AttackerID,
		arg.PlayerIp,
		arg.SquadID,
		arg.SquadName,
		arg.TeamID,
		arg.ChatType,
		arg.IsTeamkill,
		arg.Message,
		arg.Map,
	)
	var log_id int64
	err := row.Scan(&log_id)
	return log_id, err
}
