// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChatType string

const (
	ChatTypeChatAll   ChatType = "ChatAll"
	ChatTypeChatTeam  ChatType = "ChatTeam"
	ChatTypeChatSquad ChatType = "ChatSquad"
	ChatTypeChatAdmin ChatType = "ChatAdmin"
)

func (e *ChatType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatType(s)
	case string:
		*e = ChatType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatType: %T", src)
	}
	return nil
}

type NullChatType struct {
	ChatType ChatType `json:"chat_type"`
	Valid    bool     `json:"valid"` // Valid is true if ChatType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatType) Scan(value interface{}) error {
	if value == nil {
		ns.ChatType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatType), nil
}

type Ban struct {
	BanID     int64              `json:"ban_id"`
	UserID    int32              `json:"user_id"`
	PlayerID  int32              `json:"player_id"`
	Reason    string             `json:"reason"`
	Note      *string            `json:"note"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	EndAt     pgtype.Timestamptz `json:"end_at"`
}

type Log struct {
	LogID      int64              `json:"log_id"`
	LogType    string             `json:"log_type"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	ServerID   *int32             `json:"server_id"`
	UserID     *int32             `json:"user_id"`
	PlayerID   *int32             `json:"player_id"`
	VictimID   *int32             `json:"victim_id"`
	AttackerID *int32             `json:"attacker_id"`
	PlayerIp   *string            `json:"player_ip"`
	SquadID    *string            `json:"squad_id"`
	SquadName  *string            `json:"squad_name"`
	TeamID     *string            `json:"team_id"`
	ChatType   NullChatType       `json:"chat_type"`
	IsTeamkill *bool              `json:"is_teamkill"`
	Message    *string            `json:"message"`
	Map        *string            `json:"map"`
}

type Player struct {
	PlayerID  int32              `json:"player_id"`
	Name      string             `json:"name"`
	EosID     string             `json:"eos_id"`
	SteamID   string             `json:"steam_id"`
	FirstSeen pgtype.Timestamptz `json:"first_seen"`
	LastSeen  pgtype.Timestamptz `json:"last_seen"`
}

type SchemaMigration struct {
	Version string `json:"version"`
}

type Server struct {
	ServerID         int32  `json:"server_id"`
	User             string `json:"user"`
	Host             string `json:"host"`
	Password         string `json:"password"`
	RconPassword     string `json:"rcon_password"`
	RconPort         string `json:"rcon_port"`
	AdminLogFilePath string `json:"admin_log_file_path"`
	GameLogFilePath  string `json:"game_log_file_path"`
}

type User struct {
	UserID    int32              `json:"user_id"`
	SteamID   string             `json:"steam_id"`
	Name      string             `json:"name"`
	Avatar    *string            `json:"avatar"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}
