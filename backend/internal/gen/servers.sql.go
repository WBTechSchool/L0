// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: servers.sql

package gen

import (
	"context"
)

const getServer = `-- name: GetServer :one
SELECT server_id, "user", host, password, rcon_password, rcon_port, admin_log_file_path, game_log_file_path FROM servers
WHERE server_id = $1
LIMIT 1
`

func (q *Queries) GetServer(ctx context.Context, serverID int32) (Server, error) {
	row := q.db.QueryRow(ctx, getServer, serverID)
	var i Server
	err := row.Scan(
		&i.ServerID,
		&i.User,
		&i.Host,
		&i.Password,
		&i.RconPassword,
		&i.RconPort,
		&i.AdminLogFilePath,
		&i.GameLogFilePath,
	)
	return i, err
}

const getServers = `-- name: GetServers :many
SELECT server_id, "user", host, password, rcon_password, rcon_port, admin_log_file_path, game_log_file_path FROM servers
`

func (q *Queries) GetServers(ctx context.Context) ([]Server, error) {
	rows, err := q.db.Query(ctx, getServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ServerID,
			&i.User,
			&i.Host,
			&i.Password,
			&i.RconPassword,
			&i.RconPort,
			&i.AdminLogFilePath,
			&i.GameLogFilePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
