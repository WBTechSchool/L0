services:
  broker:
    image: bitnami/kafka:latest
    restart: always
    ports:
      - "9094:9094"
    volumes:
      - ./kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server broker:9092 --list && kafka-topics.sh --create --topic ${KAFKA_TOPIC} --bootstrap-server broker:9092 || exit 1"]
      interval: 10s
      timeout: 20s
      retries: 10
      start_period: 40s
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true

  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./db/pg:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_NAME}"]
      interval: 5s
      timeout: 1s
      retries: 5
  dbmate:
    image: amacneil/dbmate:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable"
    volumes:
      - ./db/migrations:/db/migrations
      - ./db/schema.sql:/db/schema.sql
    command: ["up"]
  backend:
    build: ./apps/backend
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      GIN_MODE: ${GIN_MODE}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_DATABASE_URL: "host=postgres user=${DB_USER} password=${DB_PASSWORD} dbname=${DB_NAME} port=5432 sslmode=disable"
      KAFKA_URL: ${KAFKA_URL}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"

  frontend:
    build: ./apps/frontend
    depends_on:
      backend:
        condition: service_started
    environment:
      BACKEND_PORT: ${BACKEND_PORT}
      FRONTEND_PORT: ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"